//1 task
Task[] array = new Task[100];
for(int i = 0; i < array.Length; i++)
{
    int temp = i;
    array[i] = Task.Run(() => Print(temp));
}
Task.WaitAll(array);

static async void Print(int num)
{
    for(int i=0;i<5;i++)
    {
        Console.WriteLine($"Task#{num}-{i}");
    }
}




//3 task
class Program
{
    private  object _lock = new object();
    private List<int> list = new List<int>();
    static void Main(string[] args)
    {
        Console.WriteLine("5. Write a program which creates two threads and a shared collection:");
        Console.WriteLine("the first one should add 10 elements into the collection and the second should print all elements in the collection after each adding.");
        Console.WriteLine("Use Thread, ThreadPool or Task classes for thread creation and any kind of synchronization constructions.");
        Console.WriteLine();
        CustomCollection custom = new CustomCollection();

        Thread thread_1 = new Thread(() =>
        {
            for (int i = 0; i < 10; i++)
            {
                custom.Add(i);
            }
            lock(custom)
            {
                Monitor.Pulse(custom);
            }

        });
        Thread thread_2 = new Thread(() =>
        {
            for (int i = 0; i < 10; i++)
            {
                custom.PrintValues();
            }
            lock (custom)
            {
                Monitor.Pulse(custom);
            }
        });
        thread_1.Start();
        thread_2.Start();

    }
    class CustomCollection
    {
        private List<int> list;
        public CustomCollection()
        {
            list = new List<int>();
        }
        public void Add(int value)
        {
            //clasdan foydalanilganda class obyektini bloklaydi 
            lock (this)
            {
                list.Add(value);
                //classga kelgan keyingi vazifa uchun obyektni blokdan yechadi
                Monitor.Pulse(this);

                Monitor.Wait(this);
            }
        }

        public void PrintValues()
        {
            lock(this)
            {
                foreach(var item in list)
                    Console.Write(item+"" +
                        " ");
                Console.WriteLine();
                Monitor.Pulse(this);
                Monitor.Wait(this);
            }
        }
        
    }
}